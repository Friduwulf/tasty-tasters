// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?  @default("taster")
  accounts      Account[]
  sessions      Session[]
}
model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Tasting {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  dateCreated DateTime
  dueDate DateTime
  tests Tests[]
}

model Tests {
  //Test Setup
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  date DateTime
  testType String
  //Beer Info
  beer Beer @relation(fields: [beerId], references: [id], onDelete: Cascade)
  beerId String @db.ObjectId
  batch String
  //Connection to a tasting
  tastingId String @db.ObjectId
  tasting Tasting @relation(fields: [tastingId], references: [id], onDelete: Cascade)
  //Test Results
}

model Beer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  brewery String
  style String
  test Tests[]
}

model Tags {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  // tests Tests @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String[] @db.ObjectId
}